package org.vfspoc.core;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.vfspoc.FsUtils;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class OpenTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(OpenTest.class);
    public static final String PATH1 = "path1";

    private FileManager fileManager;

    private Path directory;

    private Open open;

    @BeforeEach
    void setUp(@TempDir Path tempDir) throws IOException {
        fileManager=new FileManager();

        assertTrue(Files.exists(tempDir));
        Path temp=tempDir.resolve("temp");
        assertFalse(Files.exists(temp));
        Files.createDirectory(temp);
        assertTrue(Files.exists(temp));
        assertTrue(Files.isDirectory(temp));
        directory=temp;
        fileManager=new FileManager();
        fileManager.addPath(PATH1,temp);

        open=new Open(fileManager);
    }

    @Test
    void newInputStream() throws IOException {

        final String filename = "fichier.txt";
        final Path file=directory.resolve(filename);
        final byte[] buf="abc123456".getBytes(StandardCharsets.UTF_8);
        Files.write(file, buf);

        // methode testée
        InputStream input = open.newInputStream(getPathName(filename));

        // vérifications
        assertNotNull(input);
        byte[] byteArray = FsUtils.readAll(input);
        assertArrayEquals(buf, byteArray);
    }

    @Test
    void newOutputStream() throws IOException {
        final String filename = "fichier2.txt";
        final byte[] buf="rtyuio65874".getBytes(StandardCharsets.UTF_8);

        // methode testé
        OutputStream output = open.newOutputStream(getPathName(filename));

        // vérifications
        assertNotNull(output);
        try {
            output.write(buf);
            output.flush();
        } finally{
            output.close();
        }

        byte[] bufRes = Files.readAllBytes(directory.resolve(filename));
        assertArrayEquals(buf, bufRes);
    }

    @Test
    void newReader() throws IOException {
        final String filename = "fichier3.txt";
        final Path file=directory.resolve(filename);
        final String contenu="abc123def";
        final List<String> liste = FsUtils.newList(contenu);
        Files.write(file, liste);

        // methode testée
        FileReader reader = open.newReader(getPathName(filename));

        // vérifications
        assertNotNull(reader);
        List<String> lignes = FsUtils.readAll(reader);
        assertEquals(liste, lignes);
    }

    @Test
    void newWriter() throws IOException {
        final String filename = "fichier3.txt";
        final Path file=directory.resolve(filename);
        final String contenu="abc123def";

        // methode testée
        FileWriter writer = open.newWriter(getPathName(filename), false);

        // vérifications
        assertNotNull(writer);
        try(BufferedWriter bufferedWriter=new BufferedWriter(writer)){
            bufferedWriter.append(contenu);
        }
        List<String> list=Files.readAllLines(file);
        assertNotNull(list);
        assertEquals(1, list.size());
        assertEquals(contenu, list.get(0));
    }

    @Test
    void newByteChannel() {
    }

    // methodes utilitaires

    public PathName getPathName(String filename){
        return new PathName(PATH1, filename);
    }
}